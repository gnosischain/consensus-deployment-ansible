- name: Generate eth2 genesis
  hosts: validator
  gather_facts: false
  tasks:
    - name: Grab validator keys data
      delegate_to: localhost
      run_once: true
      with_items: "{{ groups['validator'] }}"
      set_fact:
        keys_data_dict: "{{ keys_data_dict|default({}) | combine( {item: {'indexes': hostvars[item]['indexes'], 'mnemonic': hostvars[item]['mnemonic']}} ) }}"

    - name: Validate ranges + prepare mnemonics.yaml
      delegate_to: localhost
      run_once: true
      script: "./scripts/validate_ranges.py '{{keys_data_dict | to_json}}' {{local_eth2_config_filepath}} {{local_mnemonics_filepath}}"

    - name: Load config
      delegate_to: localhost
      run_once: true
      set_fact:
        eth2_config: "{{ lookup('file', local_eth2_config_filepath) | from_yaml }}"

    # Note the genesis time persisted in genesis.ssz = MIN_GENESIS_TIME + GENESIS_DELAY
    - name: Generate genesis
      delegate_to: localhost
      run_once: true
      vars:
        cl_genesis_eth1_block: "0x0000000000000000000000000000000000000000000000000000000000000000"
      shell: >
        docker run --rm --entrypoint=eth2-testnet-genesis \
        -v {{local_custom_config_data_host_dir}}:/data \
        skylenet/ethereum-genesis-generator phase0 \
        --eth1-block "{{cl_genesis_eth1_block}}" \
        --timestamp "{{eth2_config['MIN_GENESIS_TIME']}}" \
        --config /data/config.yaml \
        --mnemonics /data/mnemonics.yaml \
        --tranches-dir /data/tranches \
        --state-output /data/genesis.ssz

- name: Generate validator keys
  hosts: none
  gather_facts: false
  serial: 20
  vars:
    output_keys_dirpath: /tmp/generated_keys/validator
    output_keys_dirpath_cont: /validator_prep/validator
    output_keys_dirpath_volume: /tmp/generated_keys:/validator_prep
  tasks:
    - name: Parse indexes range
      set_fact:
        from_index: "{{ indexes.split('..')[0] | int }}"
        to_index: "{{ indexes.split('..')[1] | int }}"

    - name: Clear directory
      become: true
      shell: rm -rf {{output_keys_dirpath}}
    # {{output_keys_dirpath}} is created by the docker bind below when running the container

    - name: Generate keys
      shell: >
        docker run --rm --entrypoint=eth2-val-tools \
        -v {{output_keys_dirpath_volume}} \
        skylenet/ethereum-genesis-generator keystores \
        --insecure \
        --prysm-pass="prysm" \
        --out-loc="{{output_keys_dirpath_cont}}" \
        --source-max={{to_index}} \
        --source-min={{from_index}} \
        --source-mnemonic="{{mnemonic}}"

    # {{validator_node_dir}} must be created manually
    - name: Creates validator dir
      file:
        path: "{{validator_node_dir}}"
        state: directory

    # Grab the right keys for each eth2 client

    - name: Copy keys for lighthouse
      when: eth2_client_name == 'lighthouse'
      shell: |
        cp -r "{{output_keys_dirpath}}/keys" "{{validator_node_dir}}/validators"
        cp -r "{{output_keys_dirpath}}/secrets" "{{validator_node_dir}}/secrets"
    - name: Copy keys for teku
      when: eth2_client_name == 'teku'
      shell: |
        cp -r "{{output_keys_dirpath}}/teku-keys" "{{validator_node_dir}}/keys"
        cp -r "{{output_keys_dirpath}}/teku-secrets" "{{validator_node_dir}}/secrets"
    - name: Create folders for prysm
      when: eth2_client_name == 'prysm'
      shell: |
        mkdir -p "{{validator_node_dir}}/wallet/direct/accounts"
        echo "prysm" > "{{validator_node_dir}}/wallet_pass.txt"
        cp -r "{{output_keys_dirpath}}/prysm/direct/accounts/all-accounts.keystore.json" "{{validator_node_dir}}/wallet/direct/accounts/all-accounts.keystore.json"
        cp -r "{{output_keys_dirpath}}/prysm/keymanageropts.json" "{{validator_node_dir}}/wallet/direct/keymanageropts.json"
    - name: Copy keys for nimbus
      when: eth2_client_name == 'nimbus'
      shell: |
        cp -r "{{output_keys_dirpath}}/nimbus-keys" "{{validator_node_dir}}/keys"
        cp -r "{{output_keys_dirpath}}/secrets" "{{validator_node_dir}}/secrets"
    - name: Copy keys for lodestar
      when: eth2_client_name == 'lodestar'
      shell: |
        cp -r "{{output_keys_dirpath}}/keys" "{{validator_node_dir}}/keystores"
        cp -r "{{output_keys_dirpath}}/secrets" "{{validator_node_dir}}/secrets"

    - name: Modify permissions to match user-group inside docker image
      shell: chown -R "{{validator_user_id}}" "{{validator_node_dir}}"
      become: true
